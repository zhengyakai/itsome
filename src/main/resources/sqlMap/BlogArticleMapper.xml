<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yakai.blog.dao.BlogArticleMapper" >
  <resultMap id="BaseResultMap" type="com.yakai.blog.model.BlogArticle" >
    <id column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="label" property="label" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yakai.blog.model.BlogArticle" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    article_id, title, type, label, create_time, modify_time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.yakai.blog.model.BlogArticleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yakai.blog.model.BlogArticleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from blog_article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    where article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from blog_article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yakai.blog.model.BlogArticle" >
    insert into blog_article (article_id, title, type, 
      label, create_time, modify_time, 
      content)
    values (#{articleId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{label,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yakai.blog.model.BlogArticle" >
    insert into blog_article
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="label != null" >
        label,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="label != null" >
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yakai.blog.model.BlogArticle" >
    update blog_article
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="label != null" >
        label = #{label,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yakai.blog.model.BlogArticle" >
    update blog_article
    set title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      label = #{label,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yakai.blog.model.BlogArticle" >
    update blog_article
    set title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      label = #{label,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <!-- 首页文章 -->
  <select id="getArticleIndexVos" resultType="com.yakai.blog.model.BlogArticleIndexVo">
    select article_id articleId,title,label,create_time createTime
    from blog_article
    ORDER by create_time DESC
  </select>
  <!-- 获得所有标签以及数目 -->
  <select id="getAllLabels" resultType="com.yakai.blog.model.BlogLabelVo">
    select label,count(1) labelCount
    from blog_article
    GROUP by label
  </select>
  <!-- 通过标签名获得相关文章 -->
  <select id="getArticlesByLabelName" resultType="com.yakai.blog.model.BlogArticleVo" parameterType="String">
    select title,article_id articleId,create_time createTime
    from blog_article
    where label=#{labelName}
    ORDER BY create_time desc
  </select>
  <!-- 通过分类获得相关文章 -->
  <select id="getArticlesByTypeId" resultType="com.yakai.blog.model.BlogArticleVo" parameterType="Integer">
    select a.title,a.article_id articleId,a.create_time createTime,t.type_id typeId,t.type_name typeName
    from blog_article a,blog_type t
    where a.type=t.type_id
    and t.type_id=#{typeId}
    ORDER BY create_time desc
  </select>

  <select id="getDateList" resultType="com.yakai.blog.model.BlogArchiveVo">
    select DATE_FORMAT(a.create_time,'%Y-%m') dateStr,count(1) dateCount
    from blog_article a
    GROUP BY dateStr
    ORDER BY dateStr desc
  </select>

  <select id="getArticlesByDate" parameterType="String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from blog_article
    where DATE_FORMAT(create_time,'%Y-%m')=#{dateStr}
    ORDER BY create_time desc
  </select>


  <!--<select id="selectLikeType" parameterType="String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from blog_article a,blog_type t
    where a.type = t.type_id
    and t.type_name like CONCAT('%',#{searchWords},'%')
    ORDER BY create_time desc
  </select>-->
</mapper>